from config import DATABASE_NAME
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import html
import keyboards as kb
from db import DataBase
import get_weather_data as getdata
import output_data as outputdata

router = Router()

class Weather(StatesGroup): # –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    city = State()
    city_locate = State()

"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç"""
@router.message(CommandStart())
async def cmd_start(message: Message):
    db = DataBase(DATABASE_NAME)
    
    if(db.check_user(message.from_user.id) == None):
        db.add_user(message.from_user.id)
    
        await message.answer(f"üî• –ü—Ä–∏–≤–µ—Ç {html.bold(html.quote(message.from_user.full_name))}, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.", 
                            reply_markup=kb.main)
    else:
        await message.answer(f"üì¢ {html.bold(html.quote(message.from_user.full_name))}, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=kb.main)

"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≥–æ–¥—ã –ø–æ —Ä—É—á–Ω–æ–º—É –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É –ø–æ–∏—Å–∫—É"""
@router.message(F.text == "‚õÖ –ü–æ–≥–æ–¥–∞ - –í –º–∏—Ä–µ üåç")
async def get_weather_world(message: Message, state: FSMContext):
    await message.answer(f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞.\n\n–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞, –Ω–∞–∂–º–∏—Ç–µ - –û—Ç–º–µ–Ω–∞", reply_markup=kb.cancel)
    await state.set_state(Weather.city)

@router.message(Weather.city)
async def get_weather_city(message: Message, state: FSMContext): 
    try:
        await state.update_data(city=message.text)
        data_about_city = await state.get_data()
        city = data_about_city['city']
        
        if city == "‚ùé –û—Ç–º–µ–Ω–∞" or city == "/menu":
            await message.answer("üö¨üóø –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é.", reply_markup=kb.main)
            await state.clear()
        else: 
            weather_res_status, weather_data = await getdata.get_weather_in_city(city)
            
            if weather_res_status==200:
                await outputdata.output_weather(message, weather_data, city)
            elif weather_res_status==404:
                await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞", reply_markup=kb.cancel)
    except:
        await message.answer(f"üò† –ù–µ—Ç, —Ç–∞–∫ –Ω–µ –ø–æ–π–¥–µ—Ç, –º–Ω–µ –Ω—É–∂–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º")
        
"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≥–æ–¥—ã –≤ –≥–æ—Ä–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
@router.message(F.text == "üå§Ô∏è –ü–æ–≥–æ–¥–∞ - –ú–æ–π –≥–æ—Ä–æ–¥ üèôÔ∏è")
async def locat(message: Message):
    db = DataBase(DATABASE_NAME)
    user_city = db.check_city(message.from_user.id)
    
    if(user_city == None):
        await message.answer(f"üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –≤–∞—à–µ–º –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ.", reply_markup=kb.send_locate)
    else:
        res, weather_data = await getdata.get_weather_in_city(user_city)
        await outputdata.output_weather(message, weather_data, user_city)
        await message.answer(f"‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥–Ω–æ–∑–µ –ø–æ–≥–æ–¥—ã –≤ –Ω–∞—Å–µ–ª–µ–Ω–æ–º –ø—É–Ω–∫—Ç–µ {html.bold(user_city)}", reply_markup=kb.weather_five_day)

"""–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
@router.message(F.text == "üñãÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")
async def write(message: Message, state: FSMContext): 
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞.", reply_markup=kb.return_to_back)
    await state.set_state(Weather.city_locate)
    
@router.message(Weather.city_locate) 
async def get_weather_locate(message: Message, state: FSMContext): # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π
    try:
        await state.update_data(city_locate=message.text)
        data_about_city = await state.get_data()
        city_name = data_about_city['city_locate']
        
        db = DataBase(DATABASE_NAME)
        
        if city_name == "‚¨á –í–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ":
            await state.clear()
            await message.answer("üö¨üóø –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=kb.send_locate)
        elif city_name == "/menu":
            await state.clear()
            await message.answer("üö¨üóø –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é.", reply_markup=kb.main)
        else: 
            weather_res_status, weather_data = await getdata.get_weather_in_city(city_name)
            
            if weather_res_status==200:
                db.add_city(city_name, message.from_user.id)
                await message.answer(f"üè¢ –ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç - {html.bold(city_name.title())}, –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω", reply_markup=kb.main)
                await state.clear()
            elif weather_res_status==404:
                await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞", reply_markup=kb.return_to_back)
    except:
        await message.answer(f"üò† –ù–µ—Ç, —Ç–∞–∫ –Ω–µ –ø–æ–π–¥–µ—Ç, –º–Ω–µ –Ω—É–∂–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º")

@router.message(F.location)
async def location(message: Message): # –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–¥ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
        
    lat = message.location.latitude
    lon = message.location.longitude
    
    weather_data = await getdata.get_coordinates_city(lat, lon)
    
    if weather_data['name'] == '':
        await message.answer("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        global global_city 
        global_city = weather_data['name']
        
        await message.answer(f"üåè –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ {global_city}?", reply_markup=kb.confirm_locate)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±—ç–∫–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == 'confirm') 
async def locat_confirm(callback: CallbackQuery):
    db = DataBase(DATABASE_NAME)
    db.add_city(global_city, callback.from_user.id)
    
    await callback.message.edit_text(f"‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    await callback.message.answer('üö¨üóø –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.', reply_markup=kb.main)

    
@router.callback_query(F.data == 'revoke')
async def locat_revoke(callback: CallbackQuery):
    await callback.message.edit_text(f"‚ùó –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±—ç–∫–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π
@router.callback_query(F.data == 'five_day')
async def weather_five_day(callback: CallbackQuery):
    db = DataBase(DATABASE_NAME)
    user_city = db.check_city(callback.from_user.id)
    
    weather_data = await getdata.get_weather_five_days(user_city)
    await outputdata.output_weather_five_days(callback, weather_data, user_city)
    
"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è")
async def profil(message: Message):
    db = DataBase(DATABASE_NAME)
    city_data = db.check_city(message.from_user.id)
    
    if(city_data == None):
        city_data = "–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
    
    await outputdata.output_profil_data(message, city_data)
        
@router.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def change_info(message: Message):
    await message.answer(f"üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –≤–∞—à–µ–º –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ.", reply_markup=kb.send_locate)
    
@router.message(F.text == "‚úÇÔ∏è –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def delete_info(message: Message):
    db = DataBase(DATABASE_NAME)
    
    if(db.check_city(message.from_user.id) == None):
        await message.answer("‚ùó –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.", reply_markup=kb.main)
    else: 
        await message.answer(f"‚ùó –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ?", reply_markup=kb.choise)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±—ç–∫–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == 'choise_yes')
async def choise_yes(callback: CallbackQuery):
    db = DataBase(DATABASE_NAME)
    city = db.check_city(callback.from_user.id)
    db.delete_city(city, callback.from_user.id)
    
    await callback.message.edit_text(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
    await callback.message.answer("üö¨üóø –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=kb.main)
    
@router.callback_query(F.data == 'choise_no')
async def choise_no(callback: CallbackQuery):
    await callback.message.edit_text("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.message.answer("üö¨üóø –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=kb.main)
    
"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"""
@router.message(F.text == "üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def back_to_menu(message: Message):
    await message.answer("üö¨üóø –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=kb.main)   

"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–û –±–æ—Ç–µ'"""
@router.message(F.text == "ü§ñ –û –±–æ—Ç–µ")
async def bot_info(message: Message):
    await message.answer(f"üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ.\n\n–í–µ—Ä—Å–∏—è 0.0.1\n\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞ - @chonjone")
    
"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é"""
@router.message(Command('menu'))
async def cmd_menu(message: Message):
    await message.answer(f"‚ö° {html.bold(html.quote(message.from_user.full_name))}, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.", reply_markup=kb.main)

"""–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥ –¥—Ä—É–≥–∏–µ —Ä–æ—É—Ç–µ—Ä—ã"""
@router.message()
async def cmd_other(message: Message):
    await message.answer(f"üåû {html.bold(html.quote(message.from_user.full_name))}, –Ω–∞–ø–∏—à–∏—Ç–µ /menu –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
    